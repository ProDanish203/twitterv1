// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  username         String   @unique
  email            String   @unique
  bio              String?
  emailVerfied     String?
  image            String?
  coverImage       String?
  profileImage     String?
  password         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  followingIds     String[] @db.ObjectId
  followersIds     String[] @db.ObjectId
  hasNotifications Boolean?
  onboarded        Boolean  @default(false)

  posts         Post[]
  comments      Comment[]
  notifications Notification[]
}

model Post {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  User   User?   @relation(fields: [author], references: [id], onDelete: Cascade)
  author String? @db.ObjectId

  body      String
  likesId   String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
}

model Comment {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.ObjectId
  Post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String? @db.ObjectId

  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.ObjectId

  body      String
  createdAt DateTime @default(now())
}
